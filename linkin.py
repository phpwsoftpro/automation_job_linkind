#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import re
import time
import pyautogui
import pyperclip
import subprocess
import pandas as pd
from pathlib import Path

# ====== C·∫•u h√¨nh ======
image_folder = Path("/Users/phamkhue/Downloads/save")
output_folder = Path("/Users/phamkhue/Downloads/savecsv")
output_csv = output_folder / "full_company_info.csv"
duplicate_csv = output_folder / "trung_company.csv"

# ====== Prompts ======
prompt1 = (
    "T√¨m t√™n c·ªßa c√¥ng ty xu·∫•t hi·ªán trong ·∫£nh.\n\n"
    "Ch·ªâ tr·∫£ l·ªùi t√™n c√¥ng ty ƒë√≥, kh√¥ng th√™m th√¥ng tin kh√°c. N·∫øu c√≥ nhi·ªÅu t√™n c√¥ng ty, h√£y ch·ªçn c√¥ng ty ch√≠nh.\n\n"
    "H√£y tr·∫£ l·ªùi t√™n c√¥ng ty ƒë√≥ trong m·ªôt code block (d√πng ba d·∫•u backtick ```)."
)

prompt2 = '''From the job image below, extract structured company and job information in exactly the 6 sections below.

Please answer in Vietnamese.

The output must strictly follow this format, using numbered sections exactly as shown below (with `1.`, `2.`, etc. at the beginning of each section). Do not use bullet points, markdown symbols (**), or any additional formatting.

The 6 required sections:

1. Website ch√≠nh th·ª©c v√† email li√™n h·ªá c·ªßa c√¥ng ty (t√¨m tr√™n Google n·∫øu kh√¥ng c√≥ trong ·∫£nh)
2. Techstack s·ª≠ d·ª•ng trong JD
3. Job Description g·ªìm: v·ªã tr√≠, tr√°ch nhi·ªám, y√™u c·∫ßu
4. VƒÉn ph√≤ng ch√≠nh c·ªßa c√¥ng ty c√≥ ·ªü c√°c khu v·ª±c: ·∫§n ƒê·ªô, Vi·ªát Nam, ƒê√¥ng Nam √Å, Ch√¢u Phi, Nam M·ªπ kh√¥ng?
5. C√¥ng vi·ªác n√†y c√≥ ph·∫£i l√† Intern, Trainee hay Volunteer kh√¥ng?
6. C√¥ng ty c√≥ thu·ªôc nh√≥m: Human Resources, Staffing and Recruitment, Nonprofit Organization, Outsourcing and Offshoring kh√¥ng?

Wrap the entire response in a single code block using triple backticks.
'''

# ====== Helper ======
def copy_file_to_clipboard_mac(filepath: str):
    applescript = f'''
    set theFile to POSIX file "{filepath}" as alias
    tell application "Finder"
        activate
        select theFile
        delay 0.2
        tell application "System Events" to keystroke "c" using command down
    end tell
    delay 0.4
    tell application "Google Chrome" to activate
    '''
    subprocess.run(["osascript", "-e", applescript])
    time.sleep(0.6)

def safe_copy_last_message(max_retry=3, wait=1.2):
    """‚åò‚áß; ƒë·ªÉ copy message cu·ªëi. Th·ª≠ l·∫°i n·∫øu clipboard r·ªóng."""
    for _ in range(max_retry):
        pyperclip.copy("")
        pyautogui.hotkey('command', 'shift', ';')
        time.sleep(wait)
        txt = pyperclip.paste().strip()
        if txt:
            return txt
    return ""

def extract_company_name(text: str) -> str:
    # ∆Øu ti√™n l·∫•y trong code block
    m = re.search(r"```(?:\w*\n)?(.*?)```", text, re.DOTALL)
    if m:
        name = m.group(1).strip().splitlines()[0].strip()
        if name:
            return name
    # fallback: d√≤ng ƒë·∫ßu ti√™n c√≥ ch·ªØ
    for line in text.splitlines():
        s = line.strip().strip("#*-` ")
        if s:
            return s
    return "[Unknown Company]"

def extract_fields_from_txt_resilient(text):
    text = re.sub(r':contentReference\[.*?\]', '', text)
    blocks = {}
    pattern = r'(?P<index>\d)\.\s(.*?)(?=\n\d\.|\Z)'
    for match in re.finditer(pattern, text, re.DOTALL):
        idx = int(match.group("index"))
        blocks[idx] = match.group(0).strip()

    email_match = re.search(r'[\w\.-]+@[\w\.-]+\.\w+', blocks.get(1, ""))
    email = email_match.group(0).strip() if email_match else ""

    url = ""
    url_match = re.search(r'(https?://[^\s\)\]\"]+)', blocks.get(1, ""))
    if url_match:
        url = url_match.group(1).strip()
    else:
        domain_match = re.search(r'\b([\w\-]+\.(?:com|net|org|io|ai|co|biz|dev))\b', blocks.get(1, ""))
        if domain_match:
            url = f"https://{domain_match.group(1).strip()}"

    return {
        "email": email,
        "url cty": url,
        "Tech stack": blocks.get(2, ""),
        "jd": blocks.get(3, ""),
        "VƒÉn ph√≤ng ch√≠nh": blocks.get(4, ""),
        "Lo·∫°i h√¨nh c√¥ng vi·ªác": blocks.get(5, ""),
        "Nh√≥m ng√†nh": blocks.get(6, "")
    }

def handle_one_image(image_path: Path, output_txt_path: Path):
    # Copy file ·∫£nh v√†o clipboard r·ªìi m·ªü Chrome
    copy_file_to_clipboard_mac(str(image_path))

    # New chat
    pyautogui.hotkey('command', 'shift', 'o')
    time.sleep(1.2)

    # Focus khung chat
    pyautogui.hotkey('shift', 'esc')
    time.sleep(1.2)

    # Paste ·∫£nh
    pyautogui.hotkey('command', 'v')
    time.sleep(2.0)

    # === Prompt 1: h·ªèi t√™n c√¥ng ty ===
    pyperclip.copy(prompt1)
    pyautogui.hotkey('command', 'v')
    time.sleep(0.6)
    pyautogui.hotkey('shift', 'esc')
    time.sleep(0.6)
    pyautogui.press('enter')

    # ƒê·ª£i 15s ƒë·ªÉ c√≥ c√¢u tr·∫£ l·ªùi, r·ªìi copy
    time.sleep(15.0)
    response1 = safe_copy_last_message()
    company_name = extract_company_name(response1) if response1 else "[Unknown Company]"
    print(f"üè∑Ô∏è Company: {company_name}")

    # === Prompt 2: h·ªèi chi ti·∫øt ===
    pyperclip.copy(prompt2)
    pyautogui.hotkey('command', 'v')
    time.sleep(0.6)
    pyautogui.hotkey('shift', 'esc')
    time.sleep(0.6)
    pyautogui.press('enter')
    print("üü¢ Prompt 2 sent.")

    # ƒê·ª£i ƒë·ªÉ model tr·∫£ l·ªùi ƒë·∫ßy ƒë·ªß r·ªìi copy
    time.sleep(30.0)
    final_response = safe_copy_last_message()
    if not final_response or len(final_response) < 30:
        print("‚ùå No useful response from Prompt 2.")
        return None, company_name

    with open(output_txt_path, "w", encoding="utf-8") as f:
        f.write(final_response)

    return final_response, company_name

# ====== MAIN ======
output_folder.mkdir(parents=True, exist_ok=True)

def extract_index(file: Path):
    m = re.search(r'pic(\d+)', file.stem, re.IGNORECASE)
    return int(m.group(1)) if m else float('inf')

image_files = sorted(
    (f for f in image_folder.iterdir() if f.suffix.lower() in (".png", ".jpg", ".jpeg", ".webp")),
    key=extract_index
)

rows = []
for idx, image_path in enumerate(image_files, start=1):
    txt_path = output_folder / image_path.with_suffix(".txt").name
    print(f"üì∏ ({idx}) ƒêang x·ª≠ l√Ω ·∫£nh: {image_path.name}")

    final_response, company_name = None, "[Unknown Company]"
    for attempt in range(2):
        final_response, company_name = handle_one_image(image_path, txt_path)
        if final_response:
            break
        print(f"‚ö†Ô∏è Th·ª≠ l·∫°i ·∫£nh: {image_path.name} (l·∫ßn {attempt+1})")

    if not final_response:
        print(f"‚ùå B·ªè qua ·∫£nh: {image_path.name}")
        continue

    with open(txt_path, "r", encoding="utf-8") as f:
        parsed = extract_fields_from_txt_resilient(f.read())

    parsed["source"] = image_path.name
    parsed["company name"] = company_name
    rows.append(parsed)

# ====== Xu·∫•t CSV ======
df_all = pd.DataFrame(rows)

# 1) L∆∞u to√†n b·ªô (k·ªÉ c·∫£ tr√πng)
df_all.to_csv(duplicate_csv, index=False)
print(f"üìÇ ƒê√£ l∆∞u to√†n b·ªô d·ªØ li·ªáu (k·ªÉ c·∫£ tr√πng) v√†o: {duplicate_csv}")

# 2) L·ªçc tr√πng theo company name, nh∆∞ng KH√îNG l·ªçc c√°c d√≤ng company name r·ªóng
if "company name" not in df_all.columns:
    df_all["company name"] = ""

mask_nonempty = df_all["company name"].astype(str).str.strip() != ""
df_unique = pd.concat([
    df_all[~mask_nonempty],  # gi·ªØ nguy√™n d√≤ng t√™n r·ªóng
    df_all[mask_nonempty].drop_duplicates(subset=["company name"], keep="first")
], ignore_index=True)

df_unique.to_csv(output_csv, index=False)
print(f"‚úÖ ƒê√£ l∆∞u d·ªØ li·ªáu ƒë√£ l·ªçc tr√πng theo company name v√†o: {output_csv}")
